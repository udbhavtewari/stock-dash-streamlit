import streamlit as stimport pandas as pdimport html5libimport yfinance as yfimport base64import matplotlib.pyplot as pltimport numpy as npst.title("Analysis of BSE SENSEX Companies")st.header("A web application for financial analysis for investors")st.sidebar.header('Filter by Company')#st.sidebar.write("Filters")st.markdown("""The following is a list of all companies that have been included in the BSE SENSEX since its establishment in 1986.""")st.info("""* **Base Year :** 1978-79* **Base Value :** 100""")# Web scraping of BSE Companies@st.cachedef load_data():    url = 'https://en.wikipedia.org/wiki/List_of_BSE_SENSEX_companies'    html = pd.read_html(url, header = 0)    df = html[0]    return dfdf = load_data()#sector = df.groupby('Sector')#Sidebar - Sector selection#sorted_sector_unique = sorted( df['Sector'].unique() )#selected_sector = st.sidebar.multiselect('Sector', sorted_sector_unique, sorted_sector_unique)#Sidebar - companies selection#companies = df['Companies'].unique()#companies_selected = st.sidebar.selectbox('Select company to display closing price', companies)#Symbol selectionSymbols = df['Symbol'].tolist()companies_selected = st.sidebar.selectbox('Select a company to display the graphs', Symbols)# Filtering data based on sector#df_selected_sector = df[ (df['Sector'].isin(selected_sector)) ]# Filtering data based on company#df_selected_company= df[ (df['Companies'].isin(companies_selected)) ]st.header('Information on BSE listed companies at a glance')#st.write('Data Dimension: ' + str(df_selected_sector.shape[0]) + ' rows and ' + str(df_selected_sector.shape[1]) + ' columns.')st.dataframe(df)#File Downloaddef filedownload(df):    csv = df.to_csv(index=False)    b64 = base64.b64encode(csv.encode()).decode()  # strings <-> bytes conversions    href = f'<a href="data:file/csv;base64,{b64}" download="BSE.csv">Download CSV File</a>'    return hrefst.markdown(filedownload(df), unsafe_allow_html=True)#Displaying data #tickerSymbol = 'DRREDDY.BO'tickerData = yf.Ticker(companies_selected)#tickerDF = tickerData.history (period='1d',start='2000-1-01',end='2021-03-8')tickerDF = tickerData.history (period='max')infoType = st.sidebar.radio(        "Select from the following",        ('Opening Price', 'Closing Price','Volume','Dividends')    ) #st.sidebar.checkbox("ddddials")#st.sidebar.checkbox("Quarterly Financials")#st.sidebar.checkbox("Quarterly Financials")if st.button('Show Graphs'):  if (infoType == 'Opening Price'):    pass  else:    pass  if(infoType == 'Opening Price'):    st.write("""    ## Opening Price    """)    st.line_chart(tickerDF.Open)  if(infoType == 'Closing Price'):    st.write("""   ## Closing Price    """)    st.line_chart(tickerDF.Close)  if(infoType == 'Volume'):    st.write("""    ## Volume    """)    st.line_chart(tickerDF.Volume)  if(infoType == 'Dividends'):    st.write("""    ## Dividends    """)    st.line_chart(tickerDF.Dividends)# Show button to display complete historical dataif st.button('Show Complete Historical Data'):    #st.header('')    data = tickerData.history(period="max")    st.write(data)# Company profilest.sidebar.header("Company Profile")try :  info = tickerData.info  st.sidebar.write('Name : ' + info['longName'])  st.sidebar.write('Exchange : ' + info['exchange'])  st.sidebar.write('Market Capitalisation : ' + str(info['marketCap']))  st.sidebar.write('Quote Type : ' + info['quoteType'])except :  st.sidebar.write("No data available at the moment")#st.sidebar.checkbox("Quarterly Financials")#Name platest.sidebar.subheader(""" From InsightX by [Udbhav Tewari](https://www.linkedin.com/in/udbhavtewari)""")st.write("**Disclaimer - This information is provided solely for educational purposes. The information is not intended to be investment or trading advice, and it is not a solicitation or recommendation to buy, sell, or keep any of the securities listed.**")# https://pypi.org/project/yfinance/# data = yf.download(#         tickers = list(df_selected_company[:].Symbol),#         period = "ytd",#         interval = "1d",#         group_by = 'ticker',#         auto_adjust = True,#         prepost = True,#         threads = True,#         proxy = None#     )# Plot Closing Price of Query Symbol# def price_plot(symbol):#   df = pd.DataFrame(data[symbol].Close)#   df['Date'] = df.index#   plt.fill_between(df.Date, df.Close, color='skyblue', alpha=0.3)#   plt.plot(df.Date, df.Close, color='skyblue', alpha=0.8)#   plt.xticks(rotation=90)#   plt.title(symbol, fontweight='bold')#   plt.xlabel('Date', fontweight='bold')#   plt.ylabel('Closing Price', fontweight='bold')#   return st.pyplot()#num_company = st.sidebar.slider('Number of Companies', 1, 5)# if st.button('Show Plots'):    # st.header('Stock Closing Price')    #for i in list(df_selected_company.Symbol)[:num_company]:    # price_plot(df_selected_company)#Remove warning st.set_option('deprecation.showPyplotGlobalUse', False) #st.sidebar.selectbox("Select the company",("Reliance",'NTPC')) #Displaying data for JSW# tickerSymbol = "JSWSTEEL.NS"#tickerData = yf.Ticker(tickerSymbol)# tickerDF = tickerData.history (period='1d',start='2020-5-30',end='2021-03-8')# st.line_chart(tickerDF.Close)# st.line_chart(tickerDF.Volume)#Displaying complete info of a company # company = yf.Ticker("TTM")#tesla.info# tesla.calender# company.major_holders# company.institutional_holders# company.recommendations# company.dividends  # company.financials  